import promClient from 'prom-client';
declare const register: promClient.Registry<"text/plain; version=0.0.4; charset=utf-8">;
export declare const httpRequestDuration: promClient.Histogram<"method" | "route" | "status_code">;
export declare const httpRequestsTotal: promClient.Counter<"method" | "route" | "status_code">;
export declare const subscriptionsTotal: promClient.Gauge<"status" | "tier">;
export declare const trialConversionsTotal: promClient.Counter<"from_tier" | "to_tier">;
export declare const trialsExpiredTotal: promClient.Counter<string>;
export declare const paymentFailuresTotal: promClient.Counter<"tier" | "reason">;
export declare const workspacesActiveTotal: promClient.Gauge<string>;
export declare const workspacesCreatedTotal: promClient.Counter<string>;
export declare const invitationsSentTotal: promClient.Counter<"role" | "workspace_id">;
export declare const invitationsAcceptedTotal: promClient.Counter<"role" | "workspace_id">;
export declare const invitationsFailedTotal: promClient.Counter<"reason">;
export declare const invitationsPendingTotal: promClient.Gauge<string>;
export declare const usageLimitViolationsTotal: promClient.Counter<"tier" | "resource" | "workspace_id">;
export declare const usageStatsGauge: promClient.Gauge<"tier" | "resource" | "workspace_id">;
export declare const emailsSentTotal: promClient.Counter<"type" | "status">;
export declare const emailsFailedTotal: promClient.Counter<"type" | "reason">;
export declare const emailQueueSize: promClient.Gauge<string>;
export declare const authFailuresTotal: promClient.Counter<"reason" | "ip">;
export declare const authSuccessTotal: promClient.Counter<string>;
export declare const rateLimitViolationsTotal: promClient.Counter<"endpoint" | "ip">;
export declare const databaseOperationDuration: promClient.Histogram<"operation" | "collection">;
export declare const databaseConnectionsActive: promClient.Gauge<string>;
export declare const patientsTotal: promClient.Gauge<"workspace_id">;
export declare const usersTotal: promClient.Gauge<"role" | "status">;
export declare const metricsMiddleware: (req: any, res: any, next: any) => void;
export declare const updateSubscriptionMetrics: () => Promise<void>;
export declare const updateWorkspaceMetrics: () => Promise<void>;
export declare const updateInvitationMetrics: () => Promise<void>;
export declare const updateUsageMetrics: () => Promise<void>;
export declare const updateAllMetrics: () => Promise<void>;
export { register, promClient };
//# sourceMappingURL=metrics.d.ts.map