import { Response } from 'express';
import { AuthRequest } from '../middlewares/auth';
export declare class AdminController {
    private dynamicPermissionService;
    private roleHierarchyService;
    constructor();
    getAllUsers(req: AuthRequest, res: Response): Promise<any>;
    getUserById(req: AuthRequest, res: Response): Promise<any>;
    updateUserRole(req: AuthRequest, res: Response): Promise<any>;
    suspendUser(req: AuthRequest, res: Response): Promise<any>;
    reactivateUser(req: AuthRequest, res: Response): Promise<any>;
    bulkAssignRoles(req: AuthRequest, res: Response): Promise<any>;
    bulkRevokeRoles(req: AuthRequest, res: Response): Promise<any>;
    getPendingLicenses(req: AuthRequest, res: Response): Promise<any>;
    approveLicense(req: AuthRequest, res: Response): Promise<any>;
    rejectLicense(req: AuthRequest, res: Response): Promise<any>;
    getAllFeatureFlags(req: AuthRequest, res: Response): Promise<any>;
    createFeatureFlag(req: AuthRequest, res: Response): Promise<any>;
    updateFeatureFlag(req: AuthRequest, res: Response): Promise<any>;
    getSystemAnalytics(req: AuthRequest, res: Response): Promise<any>;
    getAllRoles(req: AuthRequest, res: Response): Promise<any>;
    getAllPermissions(req: AuthRequest, res: Response): Promise<any>;
    getSystemStatistics(req: AuthRequest, res: Response): Promise<any>;
    getAuditLogs(req: AuthRequest, res: Response): Promise<any>;
    getSystemHealth(req: AuthRequest, res: Response): Promise<any>;
    getSystemConfig(req: AuthRequest, res: Response): Promise<any>;
    updateSystemConfig(req: AuthRequest, res: Response): Promise<any>;
    getActivityLogs(req: AuthRequest, res: Response): Promise<any>;
    getSystemNotifications(req: AuthRequest, res: Response): Promise<any>;
    markNotificationAsRead(req: AuthRequest, res: Response): Promise<any>;
    markAllNotificationsAsRead(req: AuthRequest, res: Response): Promise<any>;
    deleteNotification(req: AuthRequest, res: Response): Promise<any>;
    getBackupStatus(req: AuthRequest, res: Response): Promise<any>;
    createBackup(req: AuthRequest, res: Response): Promise<any>;
    getSecuritySettings(req: AuthRequest, res: Response): Promise<any>;
    updateSecuritySettings(req: AuthRequest, res: Response): Promise<any>;
    getMaintenanceStatus(req: AuthRequest, res: Response): Promise<any>;
    updateMaintenanceStatus(req: AuthRequest, res: Response): Promise<any>;
    getApiKeys(req: AuthRequest, res: Response): Promise<any>;
    createApiKey(req: AuthRequest, res: Response): Promise<any>;
    revokeApiKey(req: AuthRequest, res: Response): Promise<any>;
}
export declare const adminController: AdminController;
//# sourceMappingURL=adminController.d.ts.map