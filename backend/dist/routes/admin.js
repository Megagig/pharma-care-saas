"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middlewares/auth");
const adminController_1 = require("../controllers/adminController");
const userRoleController_1 = require("../controllers/userRoleController");
const router = (0, express_1.Router)();
router.use(auth_1.auth);
router.use(auth_1.requireSuperAdmin);
router.get('/users', adminController_1.adminController.getAllUsers);
router.get('/users/:userId', adminController_1.adminController.getUserById);
router.put('/users/:userId/role', adminController_1.adminController.updateUserRole);
router.post('/users/:userId/suspend', adminController_1.adminController.suspendUser);
router.post('/users/:userId/reactivate', adminController_1.adminController.reactivateUser);
router.post('/users/bulk-assign-roles', adminController_1.adminController.bulkAssignRoles);
router.post('/users/bulk-revoke-roles', adminController_1.adminController.bulkRevokeRoles);
router.get('/users/:id/roles', userRoleController_1.userRoleController.getUserRoles.bind(userRoleController_1.userRoleController));
router.post('/users/assign-roles', userRoleController_1.userRoleController.assignUserRoles.bind(userRoleController_1.userRoleController));
router.delete('/users/:id/roles/:roleId', userRoleController_1.userRoleController.revokeUserRole.bind(userRoleController_1.userRoleController));
router.put('/users/:id/permissions', userRoleController_1.userRoleController.updateUserPermissions.bind(userRoleController_1.userRoleController));
router.get('/users/:id/effective-permissions', userRoleController_1.userRoleController.getUserEffectivePermissions.bind(userRoleController_1.userRoleController));
router.post('/users/bulk-update', userRoleController_1.userRoleController.bulkUpdateUsers.bind(userRoleController_1.userRoleController));
router.post('/users/:id/check-permission', userRoleController_1.userRoleController.checkUserPermission.bind(userRoleController_1.userRoleController));
router.post('/users/:id/preview-permissions', userRoleController_1.userRoleController.previewPermissionChanges.bind(userRoleController_1.userRoleController));
router.post('/users/:id/detect-conflicts', userRoleController_1.userRoleController.detectRoleConflicts.bind(userRoleController_1.userRoleController));
router.post('/users/:id/resolve-conflicts', userRoleController_1.userRoleController.resolveRoleConflicts.bind(userRoleController_1.userRoleController));
router.post('/users/:id/refresh-cache', userRoleController_1.userRoleController.refreshUserPermissionCache.bind(userRoleController_1.userRoleController));
router.get('/roles', adminController_1.adminController.getAllRoles);
router.get('/permissions', adminController_1.adminController.getAllPermissions);
router.get('/licenses/pending', adminController_1.adminController.getPendingLicenses);
router.post('/licenses/:userId/approve', adminController_1.adminController.approveLicense);
router.post('/licenses/:userId/reject', adminController_1.adminController.rejectLicense);
router.get('/feature-flags', adminController_1.adminController.getAllFeatureFlags);
router.post('/feature-flags', adminController_1.adminController.createFeatureFlag);
router.put('/feature-flags/:flagId', adminController_1.adminController.updateFeatureFlag);
router.get('/analytics', adminController_1.adminController.getSystemAnalytics);
router.get('/statistics', adminController_1.adminController.getSystemStatistics);
router.get('/audit-logs', adminController_1.adminController.getAuditLogs);
router.get('/system-health', adminController_1.adminController.getSystemHealth);
router.get('/system-config', adminController_1.adminController.getSystemConfig);
router.put('/system-config', adminController_1.adminController.updateSystemConfig);
router.get('/activity-logs', adminController_1.adminController.getActivityLogs);
router.get('/notifications', adminController_1.adminController.getSystemNotifications);
router.put('/notifications/:id/read', adminController_1.adminController.markNotificationAsRead);
router.put('/notifications/read-all', adminController_1.adminController.markAllNotificationsAsRead);
router.delete('/notifications/:id', adminController_1.adminController.deleteNotification);
router.get('/backup-status', adminController_1.adminController.getBackupStatus);
router.post('/create-backup', adminController_1.adminController.createBackup);
router.get('/security-settings', adminController_1.adminController.getSecuritySettings);
router.put('/security-settings', adminController_1.adminController.updateSecuritySettings);
router.get('/maintenance-status', adminController_1.adminController.getMaintenanceStatus);
router.put('/maintenance-status', adminController_1.adminController.updateMaintenanceStatus);
router.get('/api-keys', adminController_1.adminController.getApiKeys);
router.post('/api-keys', adminController_1.adminController.createApiKey);
router.delete('/api-keys/:id', adminController_1.adminController.revokeApiKey);
exports.default = router;
//# sourceMappingURL=admin.js.map