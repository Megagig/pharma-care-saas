"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const locationDataController_1 = require("../controllers/locationDataController");
const authWithWorkspace_1 = require("../middlewares/authWithWorkspace");
const rbac_1 = require("../middlewares/rbac");
const router = express_1.default.Router();
router.use(authWithWorkspace_1.authWithWorkspace);
router.get('/patients/:locationId', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationPatients);
router.get('/patients/shared', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getSharedPatients);
router.get('/analytics/:locationId?', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationAnalytics);
router.post('/assign', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.assignPatientToLocation);
router.post('/bulk-assign', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.bulkAssignPatientsToLocation);
router.post('/transfer', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.transferPatientsBetweenLocations);
router.post('/remove-assignment', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.removeLocationAssignment);
router.get('/distribution', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationDistribution);
router.get('/visits/:locationId', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationVisits);
router.get('/clinical-notes/:locationId', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationClinicalNotes);
router.post('/assign-visit', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.assignVisitToLocation);
router.post('/assign-clinical-note', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.assignClinicalNoteToLocation);
router.post('/share-patient', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.sharePatientWithLocations);
router.post('/revoke-shared-access', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.revokeSharedPatientAccess);
router.get('/accessible-patients/:locationId', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getPatientsAccessibleFromLocation);
router.post('/create-transfer', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.createPatientTransferWorkflow);
router.post('/complete-transfer', (0, rbac_1.requirePermission)('location.manage'), locationDataController_1.completePatientTransfer);
router.get('/access-summary', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.getLocationAccessSummary);
router.get('/check-access/:patientId/:locationId', (0, rbac_1.requirePermission)('location.read'), locationDataController_1.checkPatientAccess);
exports.default = router;
//# sourceMappingURL=locationDataRoutes.js.map