"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const performanceController_1 = require("../controllers/performanceController");
const auth_1 = require("../middlewares/auth");
const router = express_1.default.Router();
router.use(auth_1.auth);
router.get('/cache', performanceController_1.performanceController.getCacheMetrics.bind(performanceController_1.performanceController));
router.get('/database', performanceController_1.performanceController.getDatabaseReport.bind(performanceController_1.performanceController));
router.get('/queries', performanceController_1.performanceController.getQueryStats.bind(performanceController_1.performanceController));
router.get('/overview', performanceController_1.performanceController.getPerformanceOverview.bind(performanceController_1.performanceController));
router.post('/cache/check', performanceController_1.performanceController.checkCacheConsistency.bind(performanceController_1.performanceController));
router.post('/cache/clear', performanceController_1.performanceController.clearCache.bind(performanceController_1.performanceController));
router.post('/cache/warm', performanceController_1.performanceController.warmCache.bind(performanceController_1.performanceController));
router.post('/database/optimize', performanceController_1.performanceController.initializeDatabaseOptimizations.bind(performanceController_1.performanceController));
router.get('/latency', performanceController_1.performanceController.getLatencyMetrics.bind(performanceController_1.performanceController));
router.get('/database/profile', performanceController_1.performanceController.getDatabaseProfile.bind(performanceController_1.performanceController));
router.post('/database/profiling/enable', performanceController_1.performanceController.enableDatabaseProfiling.bind(performanceController_1.performanceController));
router.post('/database/profiling/disable', performanceController_1.performanceController.disableDatabaseProfiling.bind(performanceController_1.performanceController));
router.post('/database/indexes/optimize', performanceController_1.performanceController.optimizeDatabaseIndexes.bind(performanceController_1.performanceController));
router.post('/cache/invalidate', performanceController_1.performanceController.invalidateCacheByTags.bind(performanceController_1.performanceController));
router.get('/cache/stats', performanceController_1.performanceController.getPerformanceCacheStats.bind(performanceController_1.performanceController));
router.post('/cache/warm-performance', performanceController_1.performanceController.warmPerformanceCache.bind(performanceController_1.performanceController));
router.post('/database/indexes/create-optimized', performanceController_1.performanceController.createOptimizedIndexes.bind(performanceController_1.performanceController));
router.get('/database/indexes/analyze', performanceController_1.performanceController.analyzeExistingIndexes.bind(performanceController_1.performanceController));
router.post('/database/indexes/cleanup', performanceController_1.performanceController.cleanupUnusedIndexes.bind(performanceController_1.performanceController));
router.post('/jobs/ai-analysis', performanceController_1.performanceController.queueAIAnalysisJob.bind(performanceController_1.performanceController));
router.post('/jobs/data-export', performanceController_1.performanceController.queueDataExportJob.bind(performanceController_1.performanceController));
router.post('/jobs/cache-warmup', performanceController_1.performanceController.queueCacheWarmupJob.bind(performanceController_1.performanceController));
router.post('/jobs/database-maintenance', performanceController_1.performanceController.queueDatabaseMaintenanceJob.bind(performanceController_1.performanceController));
router.get('/jobs/statistics', performanceController_1.performanceController.getJobStatistics.bind(performanceController_1.performanceController));
exports.default = router;
//# sourceMappingURL=performance.js.map