#!/usr/bin/env node

/**
 * Fix shadcn/ui imports script
 * This script fixes the import paths generated by the cleanup script
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get all TypeScript/TSX files
function getAllTsFiles() {
  try {
    const result = execSync('find src -name "*.tsx" -o -name "*.ts"', { 
      encoding: 'utf8',
      cwd: path.join(__dirname, '..')
    });
    return result.trim().split('\n').filter(file => file.length > 0);
  } catch (error) {
    console.log('Error finding files:', error.message);
    return [];
  }
}

// Component groupings for proper imports
const componentGroups = {
  card: ['Card', 'CardContent', 'CardHeader', 'CardTitle', 'CardFooter', 'CardDescription'],
  dialog: ['Dialog', 'DialogContent', 'DialogHeader', 'DialogTitle', 'DialogFooter', 'DialogTrigger', 'DialogDescription'],
  dropdown: ['DropdownMenu', 'DropdownMenuContent', 'DropdownMenuItem', 'DropdownMenuTrigger', 'DropdownMenuLabel', 'DropdownMenuSeparator'],
  select: ['Select', 'SelectContent', 'SelectItem', 'SelectTrigger', 'SelectValue'],
  table: ['Table', 'TableBody', 'TableCell', 'TableHead', 'TableHeader', 'TableRow', 'TableCaption'],
  tabs: ['Tabs', 'TabsContent', 'TabsList', 'TabsTrigger'],
  tooltip: ['Tooltip', 'TooltipContent', 'TooltipProvider', 'TooltipTrigger'],
  popover: ['Popover', 'PopoverContent', 'PopoverTrigger'],
  alert: ['Alert', 'AlertTitle', 'AlertDescription'],
  avatar: ['Avatar', 'AvatarImage', 'AvatarFallback'],
  accordion: ['Accordion', 'AccordionContent', 'AccordionItem', 'AccordionTrigger'],
  toggle: ['Toggle', 'ToggleGroup']
};

function fixImports(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    return;
  }

  let content = fs.readFileSync(fullPath, 'utf8');
  let modified = false;

  // Find all shadcn/ui imports
  const importRegex = /import\s*{\s*([^}]+)\s*}\s*from\s*['"]@\/components\/ui\/([^'"]+)['"];?/g;
  const imports = {};
  let match;

  // Collect all imports by component type
  while ((match = importRegex.exec(content)) !== null) {
    const [fullMatch, importList, componentPath] = match;
    const components = importList.split(',').map(c => c.trim());
    
    // Group components by their proper import path
    components.forEach(component => {
      let targetGroup = componentPath;
      
      // Find the correct group for this component
      for (const [groupName, groupComponents] of Object.entries(componentGroups)) {
        if (groupComponents.includes(component)) {
          targetGroup = groupName;
          break;
        }
      }
      
      if (!imports[targetGroup]) {
        imports[targetGroup] = new Set();
      }
      imports[targetGroup].add(component);
    });
  }

  // Remove all existing shadcn/ui imports
  content = content.replace(importRegex, '');
  
  // Add consolidated imports
  const newImports = [];
  for (const [groupName, components] of Object.entries(imports)) {
    if (components.size > 0) {
      const componentList = Array.from(components).sort().join(', ');
      newImports.push(`import { ${componentList} } from '@/components/ui/${groupName}';`);
    }
  }

  if (newImports.length > 0) {
    // Find the position to insert imports (after existing imports)
    const lines = content.split('\n');
    let insertIndex = 0;
    
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].startsWith('import ') || lines[i].startsWith('//') || lines[i].trim() === '') {
        insertIndex = i + 1;
      } else {
        break;
      }
    }
    
    lines.splice(insertIndex, 0, ...newImports);
    content = lines.join('\n');
    modified = true;
  }

  // Remove duplicate empty lines
  content = content.replace(/\n\n\n+/g, '\n\n');

  if (modified) {
    fs.writeFileSync(fullPath, content);
    console.log(`âœ… Fixed imports: ${filePath}`);
  }
}

function main() {
  console.log('ðŸ”§ Fixing shadcn/ui imports...\n');
  
  const files = getAllTsFiles();
  
  files.forEach(file => {
    fixImports(file);
  });
  
  console.log('\nâœ¨ Import fixing completed!');
}

main();