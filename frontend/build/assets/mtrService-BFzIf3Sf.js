import{apiHelpers as i}from"./api-65X4hLNz.js";import"./index-B_pWc9hu.js";class u extends Error{constructor(e,r={}){super(e),this.code="MTR_VALIDATION_ERROR",this.status=400,this.name="MTRValidationError",this.details=r}}class b extends Error{constructor(e,r){super(`${e} with ID ${r} not found`),this.code="MTR_NOT_FOUND",this.status=404,this.name="MTRNotFoundError"}}class q extends Error{constructor(e){super(`Permission denied for action: ${e}`),this.code="MTR_PERMISSION_DENIED",this.status=403,this.name="MTRPermissionError"}}function F(t,e){if(!t||!t.data)throw new Error("Invalid response structure: missing data");let r=t.data;if(e&&e.length>0)for(const a of e)if(r&&typeof r=="object"&&a in r)r=r[a];else throw new Error(`Invalid response structure: missing ${a}`);return r}function I(t){if(t==null||typeof t!="object")return t;const e=["createdAt","updatedAt","completedAt","scheduledAt","dueDate","implementedAt","startDate","endDate","identifiedAt"],r={...t};return e.forEach(a=>{if(a in r&&typeof r[a]=="string")try{r[a]=new Date(r[a]).toISOString()}catch(n){console.warn(`Failed to transform date field ${a}:`,n)}}),"steps"in r&&r.steps&&typeof r.steps=="object"&&Object.keys(r.steps).forEach(a=>{const n=r.steps[a];if(n!=null&&n.completedAt&&typeof n.completedAt=="string")try{n.completedAt=new Date(n.completedAt).toISOString()}catch(s){console.warn("Failed to transform step completedAt date:",s)}}),r}function D(t){const e={...t};return Object.keys(e).forEach(r=>{const a=e[r];if(a instanceof Date)e[r]=a.toISOString();else if(typeof a=="object"&&a!==null&&!Array.isArray(a)){const n=a;Object.keys(n).length>0&&(e[r]=D(n))}}),e}const h=t=>I(t),R=t=>D(t),M=t=>{var r,a,n,s,c,d,p,l,m,w,v,S;const e=[];return(r=t.drugName)!=null&&r.trim()||e.push("Drug name is required"),(!((a=t.strength)!=null&&a.value)||t.strength.value<=0)&&e.push("Valid strength value is required"),(s=(n=t.strength)==null?void 0:n.unit)!=null&&s.trim()||e.push("Strength unit is required"),(c=t.dosageForm)!=null&&c.trim()||e.push("Dosage form is required"),(p=(d=t.instructions)==null?void 0:d.dose)!=null&&p.trim()||e.push("Dose instructions are required"),(m=(l=t.instructions)==null?void 0:l.frequency)!=null&&m.trim()||e.push("Frequency instructions are required"),(v=(w=t.instructions)==null?void 0:w.route)!=null&&v.trim()||e.push("Route of administration is required"),t.category||e.push("Medication category is required"),t.startDate||e.push("Start date is required"),(S=t.indication)!=null&&S.trim()||e.push("Indication is required"),e},T=(t,e=!1)=>{var a,n;const r=[];return e&&((!t.problems||t.problems.length===0)&&r.push("At least one problem must be associated with the therapy plan"),(!t.recommendations||t.recommendations.length===0)&&r.push("At least one recommendation is required"),(a=t.timeline)!=null&&a.trim()||r.push("Timeline is required")),(n=t.recommendations)==null||n.forEach((s,c)=>{var d;s.type&&!((d=s.rationale)!=null&&d.trim())&&r.push(`Recommendation ${c+1}: Rationale is required when type is specified`),s.rationale&&!s.type&&r.push(`Recommendation ${c+1}: Type is required when rationale is provided`),(s.type||s.rationale)&&!s.priority&&r.push(`Recommendation ${c+1}: Priority is required for complete recommendations`)}),r},g=t=>{if(!t)return console.warn("MTR object is undefined or null, returning 0% completion"),0;if(!t.steps)return console.warn("MTR steps object is undefined or null, returning 0% completion"),0;try{const e=Object.values(t.steps);if(!Array.isArray(e)||e.length===0)return console.warn("MTR steps array is empty or invalid, returning 0% completion"),0;const r=e.filter(a=>a&&typeof a=="object"&&a.completed===!0).length;return Math.round(r/e.length*100)}catch(e){return console.error("Error calculating completion percentage:",e),0}},y=t=>{try{if(!t||!t.status||t.status==="completed"||t.status==="cancelled")return!1;const e=new Date,r=new Date(t.startedAt);return Math.floor((e.getTime()-r.getTime())/(1e3*60*60*24))>({routine:7,urgent:3,high_risk:1}[t.priority]||7)}catch(e){return console.error("Error checking if MTR is overdue:",e),!1}},f=t=>{const e=new URLSearchParams;return Object.entries(t).forEach(([r,a])=>{a!=null&&a!==""&&(Array.isArray(a)?a.forEach(n=>e.append(r,n.toString())):e.append(r,a.toString()))}),e},o=(t,e)=>{var n,s,c,d,p,l,m,w,v,S,P,$,E;console.error(`MTR Service Error in ${e}:`,t);const r=t;if(((n=r.response)==null?void 0:n.status)===400)throw new u(((s=r.response.data)==null?void 0:s.message)||"Validation failed",((c=r.response.data)==null?void 0:c.details)||{});if(((d=r.response)==null?void 0:d.status)===404)throw new b(e,((p=r.response.data)==null?void 0:p.id)||"unknown");if(((l=r.response)==null?void 0:l.status)===403)throw new q(e);const a=new Error(((w=(m=r.response)==null?void 0:m.data)==null?void 0:w.message)||r.message||"An unexpected error occurred");throw a.code=((S=(v=r.response)==null?void 0:v.data)==null?void 0:S.code)||"MTR_SERVICE_ERROR",a.status=((P=r.response)==null?void 0:P.status)||500,a.details=((E=($=r.response)==null?void 0:$.data)==null?void 0:E.details)||{},a},O={async getMTRSessions(t={}){var e;try{const a=f(t).toString(),n=`/mtr${a?`?${a}`:""}`,s=await i.get(n);if(!((e=s==null?void 0:s.data)!=null&&e.data))throw new Error("Invalid response structure");const c=s.data.data;if(!c.results||!Array.isArray(c.results))throw new Error("Invalid response: missing results array");return{results:c.results.map(p=>{const l=h(p);return{...l,completionPercentage:g(l),isOverdue:y(l)}}),total:c.total||0,page:c.page||1,limit:c.limit||10}}catch(r){return o(r,"getMTRSessions")}},async getMTRSession(t){var e,r;try{if(!(t!=null&&t.trim()))throw new u("Session ID is required");const a=await i.get(`/mtr/${t}`);if(!((r=(e=a==null?void 0:a.data)==null?void 0:e.data)!=null&&r.review))throw new Error("Invalid response structure");const n=a.data.data.review,s=h(n);return{review:{...s,completionPercentage:g(s),isOverdue:y(s)}}}catch(a){return o(a,"getMTRSession")}},async createMTRSession(t){var e,r,a,n,s,c,d;try{if(!((e=t.patientId)!=null&&e.trim()))throw new u("Patient ID is required");const p=R(t),l=await i.post("/mtr",p);if(!((a=(r=l.data)==null?void 0:r.data)!=null&&a.review))throw console.error("Invalid response structure - expected review in data.data:",{hasData:!!l.data,hasDataData:!!((n=l.data)!=null&&n.data),hasReview:!!((c=(s=l.data)==null?void 0:s.data)!=null&&c.review),responseKeys:Object.keys(l),dataKeys:l.data?Object.keys(l.data):[],dataDataKeys:(d=l.data)!=null&&d.data?Object.keys(l.data.data):[],fullResponse:l}),new Error("Invalid response structure");const m=h(l.data.data.review);if(!m)throw new Error("Failed to transform MTR data");return m.steps||(console.warn("MTR steps not initialized, creating default structure"),m.steps={patientSelection:{completed:!1,completedAt:null,data:{}},medicationHistory:{completed:!1,completedAt:null,data:{}},therapyAssessment:{completed:!1,completedAt:null,data:{}},planDevelopment:{completed:!1,completedAt:null,data:{}},interventions:{completed:!1,completedAt:null,data:{}},followUp:{completed:!1,completedAt:null,data:{}}}),{review:{...m,completionPercentage:g(m),isOverdue:y(m)}}}catch(p){return o(p,"createMTRSession")}},async updateMTRSession(t,e){var r,a;try{if(console.log(`Updating MTR session, ID: "${t}"`),!t)throw console.error("MTR update failed: session ID is undefined or null"),new u("Session ID is required");if(!t.trim())throw console.error("MTR update failed: session ID is empty string"),new u("Session ID is required (empty string provided)");if(e.medications){const p=[];if(e.medications.forEach((l,m)=>{const w=M(l);w.length>0&&p.push(`Medication ${m+1}: ${w.join(", ")}`)}),p.length>0)throw new u("Medication validation failed",{medications:p})}if(e.plan){const p=T(e.plan,!1);if(p.length>0)throw new u("Therapy plan validation failed",{plan:p})}const n=R(e),s=await i.put(`/mtr/${t}`,n);if(!((a=(r=s.data)==null?void 0:r.data)!=null&&a.review))throw new Error("Invalid response structure");const c=h(s.data.data.review);return{review:{...c,completionPercentage:g(c),isOverdue:y(c)}}}catch(n){return o(n,"updateMTRSession")}},async deleteMTRSession(t){try{if(!(t!=null&&t.trim()))throw new u("Session ID is required");const e=await i.delete(`/mtr/${t}`);return{success:!0,message:"MTR session deleted successfully"}}catch(e){return o(e,"deleteMTRSession")}},async completeWorkflowStep(t,e,r){var a;try{if(!(t!=null&&t.trim()))throw new u("Session ID is required");if(!(e!=null&&e.trim()))throw new u("Step name is required");const n=["patientSelection","medicationHistory","therapyAssessment","planDevelopment","interventions","followUp"];if(!n.includes(e))throw new u(`Invalid step name: ${e}. Valid steps: ${n.join(", ")}`);if(e==="planDevelopment"&&(r!=null&&r.plan)){const l=T(r.plan,!0);if(l.length>0)throw new u("Cannot complete plan development - validation failed",{plan:l})}const s=r?R(r):void 0,c=await i.post(`/mtr/${t}/steps/${e}/complete`,{data:s});if(!((a=c.data)!=null&&a.review))throw new Error("Invalid response structure");const d=h(c.data.review);return{review:{...d,completionPercentage:g(d),isOverdue:y(d)}}}catch(n){return o(n,"completeWorkflowStep")}},async getWorkflowSteps(){var t;try{const e=await i.get("/mtr/workflow/steps");return((t=e.data)==null?void 0:t.data)||e.data}catch(e){return o(e,"getWorkflowSteps")}},async validateWorkflowStep(t,e,r){var a;try{const n=await i.post(`/mtr/${t}/steps/${e}/validate`,{data:r});return(a=n==null?void 0:n.data)!=null&&a.data?n.data.data:n!=null&&n.data?n.data:{}}catch(n){return o(n,"validateWorkflowStep")}},async checkDrugInteractions(t){var e;try{const r=await i.post(`/mtr/${t}/interactions/check`);return(e=r==null?void 0:r.data)!=null&&e.data?r.data.data:r!=null&&r.data?r.data:{}}catch(r){return o(r,"checkDrugInteractions")}},async getDrugTherapyProblems(t={}){var e;try{const a=f(t).toString(),n=`/mtr/problems${a?`?${a}`:""}`,s=await i.get(n);if(!((e=s.data)!=null&&e.data))throw new Error("Invalid response structure");const c=s.data.data.results.map(d=>h(d));return{...s.data.data,results:c}}catch(r){return o(r,"getDrugTherapyProblems")}},async getDrugTherapyProblem(t){var e;try{const r=await i.get(`/mtr/problems/${t}`);if(!((e=r.data)!=null&&e.data))throw new Error("Invalid response structure");return{problem:r.data.data}}catch(r){return o(r,"getDrugTherapyProblem")}},async createDrugTherapyProblem(t){var e,r,a,n,s;try{if(!((e=t.patientId)!=null&&e.trim()))throw new u("Patient ID is required");if(!((r=t.category)!=null&&r.trim()))throw new u("Problem category is required");if(!((a=t.description)!=null&&a.trim()))throw new u("Problem description is required");if(!((n=t.clinicalSignificance)!=null&&n.trim()))throw new u("Clinical significance is required");if(!t.affectedMedications||t.affectedMedications.length===0)throw new u("At least one affected medication is required");const c=R(t),d=await i.post("/mtr/problems",c);if(!((s=d.data)!=null&&s.data))throw new Error("Invalid response structure");return{problem:h(d.data.data)}}catch(c){return o(c,"createDrugTherapyProblem")}},async updateDrugTherapyProblem(t,e){var r;try{const a=await i.put(`/mtr/problems/${t}`,e);if(!((r=a.data)!=null&&r.data))throw new Error("Invalid response structure");return{problem:a.data.data}}catch(a){return o(a,"updateDrugTherapyProblem")}},async deleteDrugTherapyProblem(t){try{const e=await i.delete(`/mtr/problems/${t}`);return{success:!0,message:"Drug therapy problem deleted successfully"}}catch(e){return o(e,"deleteDrugTherapyProblem")}},async resolveDrugTherapyProblem(t,e){var r;try{const a=await i.post(`/mtr/problems/${t}/resolve`,e);if(!((r=a.data)!=null&&r.data))throw new Error("Invalid response structure");return{problem:a.data.data}}catch(a){return o(a,"resolveDrugTherapyProblem")}},async reopenDrugTherapyProblem(t){var e;try{const r=await i.post(`/mtr/problems/${t}/reopen`);if(!((e=r.data)!=null&&e.data))throw new Error("Invalid response structure");return{problem:r.data.data}}catch(r){return o(r,"reopenDrugTherapyProblem")}},async getInterventions(t={}){var e;try{const r=new URLSearchParams;Object.entries(t).forEach(([c,d])=>{d!=null&&d!==""&&r.append(c,d.toString())});const a=r.toString(),n=`/mtr/interventions${a?`?${a}`:""}`,s=await i.get(n);if(!((e=s.data)!=null&&e.data))throw new Error("Invalid response structure");return s.data.data}catch(r){return o(r,"getInterventions")}},async getIntervention(t){var e;try{if(!(t!=null&&t.trim()))throw new u("Intervention ID is required");const r=await i.get(`/mtr/interventions/${t}`);if(!((e=r.data)!=null&&e.data))throw new Error("Missing intervention data in response");return{intervention:h(r.data.data)}}catch(r){return o(r,"getIntervention")}},async createIntervention(t){var e,r,a,n,s,c;try{if(!((e=t.reviewId)!=null&&e.trim()))throw new u("Review ID is required");if(!((r=t.patientId)!=null&&r.trim()))throw new u("Patient ID is required");if(!((a=t.description)!=null&&a.trim()))throw new u("Intervention description is required");if(!((n=t.rationale)!=null&&n.trim()))throw new u("Intervention rationale is required");if(!((s=t.documentation)!=null&&s.trim()))throw new u("Intervention documentation is required");const d=R(t),p=await i.post("/mtr/interventions",d);if(!((c=p.data)!=null&&c.data))throw new Error("Missing intervention data in response");return{intervention:h(p.data.data)}}catch(d){return o(d,"createIntervention")}},async updateIntervention(t,e){var r;try{if(!(t!=null&&t.trim()))throw new u("Intervention ID is required");if(Object.keys(e).length===0)throw new u("No data provided for update");const a=await i.put(`/mtr/interventions/${t}`,e);if(!((r=a.data)!=null&&r.data))throw new Error("Missing intervention data in response");return{intervention:h(a.data.data)}}catch(a){return o(a,"updateIntervention")}},async deleteIntervention(t){try{if(!(t!=null&&t.trim()))throw new u("Intervention ID is required");const e=await i.delete(`/mtr/interventions/${t}`);return{success:!0,message:"Intervention deleted successfully"}}catch(e){return o(e,"deleteIntervention")}},async completeIntervention(t,e,r){var a;try{const n=await i.post(`/mtr/interventions/${t}/complete`,{outcome:e,details:r});if(!((a=n.data)!=null&&a.data))throw new Error("Invalid response structure");return{intervention:n.data.data}}catch(n){return o(n,"completeIntervention")}},async getFollowUps(t={}){var e;try{const r=new URLSearchParams;Object.entries(t).forEach(([c,d])=>{d!=null&&d!==""&&r.append(c,d.toString())});const a=r.toString(),n=`/mtr/followups${a?`?${a}`:""}`,s=await i.get(n);if(!((e=s.data)!=null&&e.data))throw new Error("Invalid response structure");return s.data.data}catch(r){return o(r,"getFollowUps")}},async getFollowUp(t){var e;try{const r=await i.get(`/mtr/followups/${t}`);if(!((e=r.data)!=null&&e.data))throw new Error("Invalid response structure");return{followUp:r.data.data}}catch(r){return o(r,"getFollowUp")}},async createFollowUp(t){var e;try{const r=await i.post("/mtr/followups",t);if(!((e=r.data)!=null&&e.followUp))throw new Error("Invalid response structure");return{followUp:r.data.followUp}}catch(r){return o(r,"createFollowUp")}},async updateFollowUp(t,e){var r;try{const a=await i.put(`/mtr/followups/${t}`,e);if(!((r=a.data)!=null&&r.data))throw new Error("Invalid response structure");return{followUp:a.data.data}}catch(a){return o(a,"updateFollowUp")}},async deleteFollowUp(t){try{const e=await i.delete(`/mtr/followups/${t}`);return{success:!0,message:"Follow-up deleted successfully"}}catch(e){return o(e,"deleteFollowUp")}},async completeFollowUp(t,e){var r;try{const a=await i.post(`/mtr/followups/${t}/complete`,{outcome:e});if(!((r=a.data)!=null&&r.data))throw new Error("Invalid response structure");return{followUp:a.data.data}}catch(a){return o(a,"completeFollowUp")}},async rescheduleFollowUp(t,e,r){var a;try{const n=await i.post(`/mtr/followups/${t}/reschedule`,{newDate:e,reason:r});if(!((a=n.data)!=null&&a.followUp))throw new Error("Invalid response structure");return{followUp:n.data.followUp}}catch(n){return o(n,"rescheduleFollowUp")}},async getMTRSessionsByPatient(t,e={}){return this.getMTRSessions({...e,patientId:t})},async getActiveMTRSessions(t={}){return this.getMTRSessions({...t,status:"in_progress"})},async getOverdueMTRSessions(){var t;try{const e=await i.get("/mtr/overdue");return((t=e.data)==null?void 0:t.data)||e.data}catch(e){return o(e,"getOverdueMTRSessions")}},async getDrugTherapyProblemsByPatient(t,e={}){return this.getDrugTherapyProblems({...e,patientId:t})},async getActiveDrugTherapyProblems(t={}){return this.getDrugTherapyProblems({...t,status:"identified,addressed,monitoring"})},async getInterventionsByReview(t,e={}){return this.getInterventions({...e,reviewId:t})},async getPendingInterventions(t={}){return this.getInterventions({...t,outcome:"pending"})},async getOverdueFollowUps(){var t;try{const e=await i.get("/mtr/followups/overdue");return((t=e.data)==null?void 0:t.data)||e.data}catch(e){return o(e,"getOverdueFollowUps")}},async getFollowUpsByReview(t,e={}){return this.getFollowUps({...e,reviewId:t})},async getScheduledFollowUps(t={}){return this.getFollowUps({...t,status:"scheduled"})},async getMTRStatistics(t){var e;try{const r=new URLSearchParams;t&&(r.append("startDate",t.start),r.append("endDate",t.end));const a=r.toString(),n=`/mtr/statistics${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getMTRStatistics")}},async getDTPStatistics(t){var e;try{const r=new URLSearchParams;t&&(r.append("startDate",t.start),r.append("endDate",t.end));const a=r.toString(),n=`/mtr/problems/statistics${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getDTPStatistics")}},async getInterventionStatistics(t){var e;try{const r=new URLSearchParams;t&&(r.append("startDate",t.start),r.append("endDate",t.end));const a=r.toString(),n=`/mtr/interventions/statistics${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getInterventionStatistics")}},async getFollowUpStatistics(t){var e;try{const r=new URLSearchParams;t&&(r.append("startDate",t.start),r.append("endDate",t.end));const a=r.toString(),n=`/mtr/followups/statistics${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getFollowUpStatistics")}},async getAuditLogs(t={}){var e;try{const a=f(t).toString(),n=`/mtr/audit${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getAuditLogs")}},validateMTRSession(t){var r;const e=[];if((r=t.patientId)!=null&&r.trim()||e.push("Patient ID is required"),t.medications&&t.medications.forEach((a,n)=>{const s=M(a);s.length>0&&e.push(`Medication ${n+1}: ${s.join(", ")}`)}),t.plan){const a=T(t.plan,!1);e.push(...a)}return{isValid:e.length===0,errors:e}},async getMTRSummary(t){try{const[e,r,a,n]=await Promise.all([this.getMTRSession(t),this.getDrugTherapyProblems({reviewId:t}),this.getInterventions({reviewId:t}),this.getFollowUps({reviewId:t})]);return{session:e.review,problemsCount:r.total||0,interventionsCount:a.total||0,followUpsCount:n.total||0,completionPercentage:g(e.review),isOverdue:y(e.review)}}catch(e){return o(e,"getMTRSummary")}},async bulkUpdateMTRStatus(t,e){try{if(!t||t.length===0)throw new u("Session IDs are required");const r=["in_progress","completed","cancelled","on_hold"];if(!r.includes(e))throw new u(`Invalid status: ${e}. Valid statuses: ${r.join(", ")}`);return(await i.post("/mtr/bulk-update-status",{sessionIds:t,status:e})).data.data}catch(r){return o(r,"bulkUpdateMTRStatus")}},async getMTRSummaryReport(t={}){var e;try{const a=f(t).toString(),n=`/mtr/reports/summary${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getMTRSummaryReport")}},async getInterventionEffectivenessReport(t={}){var e;try{const a=f(t).toString(),n=`/mtr/reports/interventions${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getInterventionEffectivenessReport")}},async getPharmacistPerformanceReport(t={}){var e;try{const a=f(t).toString(),n=`/mtr/reports/pharmacists${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getPharmacistPerformanceReport")}},async getQualityAssuranceReport(t={}){var e;try{const a=f(t).toString(),n=`/mtr/reports/quality${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data}catch(r){return o(r,"getQualityAssuranceReport")}},async getOutcomeMetricsReport(t={}){var e;try{const a=f(t).toString(),n=`/mtr/reports/outcomes${a?`?${a}`:""}`,s=await i.get(n);return((e=s.data)==null?void 0:e.data)||s.data||{}}catch(r){return o(r,"getOutcomeMetricsReport")}},async exportMTRData(t){try{const r=f(t).toString(),a=`/mtr/export${r?`?${r}`:""}`,n=await i.get(a);return n.data instanceof Blob?n.data:new Blob([JSON.stringify(n.data,null,2)],{type:"application/json"})}catch(e){return o(e,"exportMTRData")}},async checkMTRHealth(){try{return(await i.get("/mtr/health")).data.data}catch(t){return o(t,"checkMTRHealth")}}};export{b as MTRNotFoundError,q as MTRPermissionError,u as MTRValidationError,g as calculateCompletionPercentage,O as default,f as formatSearchParams,F as handleApiResponse,o as handleMTRError,y as isOverdue,O as mtrService,R as transformDatesForAPI,h as transformDatesForFrontend,M as validateMedicationEntry,T as validateTherapyPlan};
