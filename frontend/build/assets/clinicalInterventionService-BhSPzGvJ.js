const c="http://localhost:5000/api";class o{async makeRequest(e,t={}){try{const r={"Content-Type":"application/json",...t.headers},i={...t,credentials:"include",headers:r},n=await fetch(`${c}${e}`,i);if(!n.ok){const a=await n.json().catch(()=>({}));throw n.status===401&&(console.warn("Authentication failed - redirecting to login"),window.location.pathname.includes("super_admin")||(window.location.href="/login")),new Error(a.message||`HTTP ${n.status}: ${n.statusText}`)}return await n.json()}catch(r){return console.error(`API request failed for ${e}:`,r),r instanceof Error?{success:!1,message:r.message,error:r.message}:{success:!1,message:"An unexpected error occurred",error:"Unknown error"}}}async getInterventions(e={}){const t=new URLSearchParams;Object.entries(e).forEach(([i,n])=>{n!=null&&n!==""&&t.append(i,String(n))});const r=`/clinical-interventions${t.toString()?`?${t.toString()}`:""}`;return this.makeRequest(r)}async getInterventionById(e){return this.makeRequest(`/clinical-interventions/${e}`)}async createIntervention(e){return this.makeRequest("/clinical-interventions",{method:"POST",body:JSON.stringify(e)})}async updateIntervention(e,t){return this.makeRequest(`/clinical-interventions/${e}`,{method:"PATCH",body:JSON.stringify(t)})}async deleteIntervention(e){return this.makeRequest(`/clinical-interventions/${e}`,{method:"DELETE"})}async addStrategy(e,t){return this.makeRequest(`/clinical-interventions/${e}/strategies`,{method:"POST",body:JSON.stringify(t)})}async updateStrategy(e,t,r){return this.makeRequest(`/clinical-interventions/${e}/strategies/${t}`,{method:"PATCH",body:JSON.stringify(r)})}async assignTeamMember(e,t){return this.makeRequest(`/clinical-interventions/${e}/assignments`,{method:"POST",body:JSON.stringify(t)})}async updateAssignment(e,t,r){return this.makeRequest(`/clinical-interventions/${e}/assignments/${t}`,{method:"PATCH",body:JSON.stringify(r)})}async recordOutcome(e,t){return this.makeRequest(`/clinical-interventions/${e}/outcomes`,{method:"POST",body:JSON.stringify(t)})}async scheduleFollowUp(e,t){return this.makeRequest(`/clinical-interventions/${e}/follow-up`,{method:"POST",body:JSON.stringify(t)})}async searchInterventions(e){return this.makeRequest(`/clinical-interventions/search?q=${encodeURIComponent(e)}`)}async getPatientInterventions(e){return this.makeRequest(`/clinical-interventions/patient/${e}`)}async getMyAssignedInterventions(){return this.makeRequest("/clinical-interventions/assigned-to-me")}async getDashboardMetrics(e){const t=new URLSearchParams;e&&(t.append("dateFrom",e.from.toISOString()),t.append("dateTo",e.to.toISOString()));const r=`/clinical-interventions/analytics/summary${t.toString()?`?${t.toString()}`:""}`;return this.makeRequest(r)}async getStrategyRecommendations(e){return this.makeRequest(`/clinical-interventions/recommendations/${e}`)}async getOutcomeTrends(e){const t=new URLSearchParams;e&&(t.append("start",e.start),t.append("end",e.end));const r=`/clinical-interventions/analytics/trends${t.toString()?`?${t.toString()}`:""}`;return this.makeRequest(r)}async generateOutcomeReport(e){const t=new URLSearchParams;Object.entries(e).forEach(([i,n])=>{n!=null&&n!==""&&(n instanceof Date?t.append(i,n.toISOString()):t.append(i,String(n)))});const r=`/clinical-interventions/reports/outcomes${t.toString()?`?${t.toString()}`:""}`;return this.makeRequest(r)}async getCostSavingsReport(e){const t=new URLSearchParams;Object.entries(e).forEach(([i,n])=>{n!=null&&n!==""&&(n instanceof Date?t.append(i,n.toISOString()):t.append(i,String(n)))});const r=`/clinical-interventions/reports/cost-savings${t.toString()?`?${t.toString()}`:""}`;return this.makeRequest(r)}async exportInterventions(e={},t="xlsx"){const r=new URLSearchParams;Object.entries(e).forEach(([n,s])=>{s!=null&&s!==""&&r.append(n,String(s))}),r.append("format",t);const i=`/clinical-interventions/reports/export${r.toString()?`?${r.toString()}`:""}`;try{const n=await fetch(`${c}${i}`,{credentials:"include",headers:{}});if(!n.ok){const a=await n.json().catch(()=>({}));throw new Error(a.message||`HTTP ${n.status}: ${n.statusText}`)}return{success:!0,message:"Export successful",data:await n.blob()}}catch(n){return console.error("Export failed:",n),{success:!1,message:n instanceof Error?n.message:"Export failed",error:n instanceof Error?n.message:"Unknown error"}}}async linkToMTR(e,t){return this.makeRequest(`/clinical-interventions/${e}/link-mtr`,{method:"POST",body:JSON.stringify({mtrId:t})})}async sendNotifications(e,t){return this.makeRequest(`/clinical-interventions/${e}/notifications`,{method:"POST",body:JSON.stringify({event:t})})}async checkDuplicates(e,t){return this.makeRequest(`/clinical-interventions/check-duplicates?patientId=${e}&category=${t}`)}async getCategoryCounts(){return this.makeRequest("/clinical-interventions/analytics/categories")}async getPriorityDistribution(){return this.makeRequest("/clinical-interventions/analytics/priorities")}async createInterventionsFromMTR(e){return this.makeRequest("/clinical-interventions/from-mtr",{method:"POST",body:JSON.stringify(e)})}async getMTRReference(e){return this.makeRequest(`/clinical-interventions/${e}/mtr-reference`)}async getInterventionsForMTR(e){return this.makeRequest(`/clinical-interventions/mtr/${e}`)}async syncWithMTR(e){return this.makeRequest(`/clinical-interventions/${e}/sync-mtr`,{method:"POST"})}async getInterventionAuditTrail(e,t={}){const r=new URLSearchParams;Object.entries(t).forEach(([s,a])=>{a!==void 0&&r.append(s,String(a))});const i=r.toString(),n=`/clinical-interventions/${e}/audit-trail${i?`?${i}`:""}`;return this.makeRequest(n)}async getAllAuditTrail(e={}){const t=new URLSearchParams;e.page&&t.append("page",e.page.toString()),e.limit&&t.append("limit",e.limit.toString()),e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate),e.riskLevel&&t.append("riskLevel",e.riskLevel),e.userId&&t.append("userId",e.userId),e.action&&t.append("action",e.action);const r=t.toString(),i=`/clinical-interventions/audit-trail${r?`?${r}`:""}`;return this.makeRequest(i)}async getComplianceReport(e){var r;const t=new URLSearchParams;return t.append("startDate",e.startDate),t.append("endDate",e.endDate),e.includeDetails!==void 0&&t.append("includeDetails",String(e.includeDetails)),(r=e.interventionIds)!=null&&r.length&&t.append("interventionIds",e.interventionIds.join(",")),this.makeRequest(`/clinical-interventions/compliance/report?${t.toString()}`)}async exportAuditData(e){var i;const t=new URLSearchParams;t.append("format",e.format),t.append("startDate",e.startDate),t.append("endDate",e.endDate),e.includeDetails!==void 0&&t.append("includeDetails",String(e.includeDetails)),(i=e.interventionIds)!=null&&i.length&&t.append("interventionIds",e.interventionIds.join(","));const r=await fetch(`${c}/clinical-interventions/audit/export?${t.toString()}`,{credentials:"include",headers:{}});if(!r.ok)throw new Error(`Export failed: ${r.statusText}`);return r.blob()}}const d=new o;export{d as clinicalInterventionService,d as default};
