{
    "info": {
        "name": "Manual Lab Order API",
        "description": "Comprehensive API collection for Manual Lab Order workflow testing",
        "version": "1.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{jwt_token}}",
                "type": "string"
            }
        ]
    },
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:5000/api/manual-lab-orders",
            "type": "string"
        },
        {
            "key": "jwt_token",
            "value": "",
            "type": "string"
        },
        {
            "key": "patient_id",
            "value": "507f1f77bcf86cd799439011",
            "type": "string"
        },
        {
            "key": "order_id",
            "value": "",
            "type": "string"
        },
        {
            "key": "user_id",
            "value": "507f1f77bcf86cd799439012",
            "type": "string"
        },
        {
            "key": "secure_token",
            "value": "",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Order Management",
            "item": [
                {
                    "name": "Create Manual Lab Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has success true\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test(\"Order ID is generated\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data.order.orderId).to.match(/^LAB-\\d{4}-\\d{4}$/);",
                                    "    pm.collectionVariables.set(\"order_id\", jsonData.data.order.orderId);",
                                    "});",
                                    "",
                                    "pm.test(\"PDF URL is provided\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data.order.pdfUrl).to.include(\"/pdf\");",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"patientId\": \"{{patient_id}}\",\n  \"locationId\": \"main-branch\",\n  \"tests\": [\n    {\n      \"name\": \"Complete Blood Count\",\n      \"code\": \"CBC\",\n      \"loincCode\": \"58410-2\",\n      \"specimenType\": \"Blood\",\n      \"unit\": \"cells/μL\",\n      \"refRange\": \"4.5-11.0 x10³\",\n      \"category\": \"Hematology\"\n    },\n    {\n      \"name\": \"Glucose\",\n      \"code\": \"GLU\",\n      \"specimenType\": \"Blood\",\n      \"unit\": \"mg/dL\",\n      \"refRange\": \"70-100\",\n      \"category\": \"Chemistry\"\n    }\n  ],\n  \"indication\": \"Routine health screening for annual checkup\",\n  \"priority\": \"routine\",\n  \"notes\": \"Patient fasting for 12 hours\",\n  \"consentObtained\": true,\n  \"consentObtainedBy\": \"{{user_id}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}",
                            "host": [
                                "{{base_url}}"
                            ]
                        },
                        "description": "Creates a new manual lab order with PDF requisition generation"
                    }
                },
                {
                    "name": "Get Manual Lab Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order details returned\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.order).to.have.property('orderId');",
                                    "    pm.expect(jsonData.data.order).to.have.property('testCount');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}"
                            ]
                        },
                        "description": "Retrieves details of a specific lab order"
                    }
                },
                {
                    "name": "List Manual Lab Orders",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Pagination info included\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('pagination');",
                                    "    pm.expect(jsonData.data.pagination).to.have.property('total');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}?page=1&limit=20&status=requested&sort=-createdAt",
                            "host": [
                                "{{base_url}}"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "status",
                                    "value": "requested"
                                },
                                {
                                    "key": "sort",
                                    "value": "-createdAt"
                                }
                            ]
                        },
                        "description": "Lists lab orders with filtering and pagination"
                    }
                },
                {
                    "name": "Get Patient Lab Orders",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Patient orders returned\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('orders');",
                                    "    pm.expect(jsonData.data.orders).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/patient/{{patient_id}}?page=1&limit=10",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "patient",
                                "{{patient_id}}"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "10"
                                }
                            ]
                        },
                        "description": "Retrieves lab order history for a specific patient"
                    }
                },
                {
                    "name": "Update Order Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Status updated successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.order.status).to.eql('sample_collected');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"status\": \"sample_collected\",\n  \"notes\": \"Sample collected at 2:30 PM by lab technician\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}/status",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}",
                                "status"
                            ]
                        },
                        "description": "Updates the status of a lab order"
                    }
                }
            ],
            "description": "Endpoints for managing manual lab orders"
        },
        {
            "name": "Result Management",
            "item": [
                {
                    "name": "Add Lab Results",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Results added successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.result).to.have.property('valueCount');",
                                    "    pm.expect(jsonData.data.result.valueCount).to.be.greaterThan(0);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Update order status to result_awaited first",
                                    "pm.sendRequest({",
                                    "    url: pm.collectionVariables.get('base_url') + '/' + pm.collectionVariables.get('order_id') + '/status',",
                                    "    method: 'PUT',",
                                    "    header: {",
                                    "        'Content-Type': 'application/json',",
                                    "        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwt_token')",
                                    "    },",
                                    "    body: {",
                                    "        mode: 'raw',",
                                    "        raw: JSON.stringify({",
                                    "            status: 'result_awaited',",
                                    "            notes: 'Ready for result entry'",
                                    "        })",
                                    "    }",
                                    "}, function (err, response) {",
                                    "    if (err) {",
                                    "        console.log('Error updating status:', err);",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"values\": [\n    {\n      \"testCode\": \"CBC\",\n      \"testName\": \"Complete Blood Count\",\n      \"numericValue\": 7.5,\n      \"unit\": \"cells/μL\",\n      \"comment\": \"Within normal range\"\n    },\n    {\n      \"testCode\": \"GLU\",\n      \"testName\": \"Glucose\",\n      \"numericValue\": 95,\n      \"unit\": \"mg/dL\",\n      \"comment\": \"Fasting glucose level normal\"\n    }\n  ],\n  \"reviewNotes\": \"All results reviewed and validated by pharmacist\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}/results",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}",
                                "results"
                            ]
                        },
                        "description": "Submits lab results for a specific order"
                    }
                },
                {
                    "name": "Get Lab Results",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Results retrieved successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.result).to.have.property('values');",
                                    "    pm.expect(jsonData.data.result.values).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}/results",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}",
                                "results"
                            ]
                        },
                        "description": "Retrieves entered results for a specific order"
                    }
                }
            ],
            "description": "Endpoints for managing lab results"
        },
        {
            "name": "Token Resolution & PDF",
            "item": [
                {
                    "name": "Resolve Order Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Token resolved successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.order).to.have.property('orderId');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/scan?token={{secure_token}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "scan"
                            ],
                            "query": [
                                {
                                    "key": "token",
                                    "value": "{{secure_token}}"
                                }
                            ]
                        },
                        "description": "Resolves QR/barcode tokens to order details"
                    }
                },
                {
                    "name": "Get PDF Requisition",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Content-Type is PDF\", function () {",
                                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                                    "});",
                                    "",
                                    "pm.test(\"Security headers present\", function () {",
                                    "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');",
                                    "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}/pdf",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}",
                                "pdf"
                            ]
                        },
                        "description": "Serves the generated PDF requisition for a lab order"
                    }
                }
            ],
            "description": "Endpoints for token resolution and PDF generation"
        },
        {
            "name": "Compliance & Audit",
            "item": [
                {
                    "name": "Generate Compliance Report",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Compliance report generated\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.report).to.have.property('summary');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/compliance/report?dateFrom=2024-01-01&dateTo=2024-01-31",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "compliance",
                                "report"
                            ],
                            "query": [
                                {
                                    "key": "dateFrom",
                                    "value": "2024-01-01"
                                },
                                {
                                    "key": "dateTo",
                                    "value": "2024-01-31"
                                }
                            ]
                        },
                        "description": "Generates a compliance report for manual lab orders"
                    }
                },
                {
                    "name": "Get Order Audit Trail",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Audit trail retrieved\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.auditTrail).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/compliance/audit-trail/{{order_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "compliance",
                                "audit-trail",
                                "{{order_id}}"
                            ]
                        },
                        "description": "Retrieves detailed audit trail for a specific order"
                    }
                },
                {
                    "name": "Get Compliance Violations",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Violations list retrieved\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.violations).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/compliance/violations?severity=high",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "compliance",
                                "violations"
                            ],
                            "query": [
                                {
                                    "key": "severity",
                                    "value": "high"
                                }
                            ]
                        },
                        "description": "Retrieves compliance violations and security incidents"
                    }
                }
            ],
            "description": "Endpoints for compliance monitoring and audit trails"
        },
        {
            "name": "Security Monitoring",
            "item": [
                {
                    "name": "Get Security Dashboard",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Security dashboard retrieved\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.dashboard).to.have.property('threatLevel');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/security/dashboard",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "security",
                                "dashboard"
                            ]
                        },
                        "description": "Retrieves security dashboard with metrics and threats"
                    }
                },
                {
                    "name": "Get Security Threats",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Threats list retrieved\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.threats).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/security/threats?severity=medium&status=active",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "security",
                                "threats"
                            ],
                            "query": [
                                {
                                    "key": "severity",
                                    "value": "medium"
                                },
                                {
                                    "key": "status",
                                    "value": "active"
                                }
                            ]
                        },
                        "description": "Retrieves detailed threat information with filtering"
                    }
                },
                {
                    "name": "Get User Security Summary",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User security summary retrieved\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.summary).to.have.property('userId');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/security/user-summary/{{user_id}}",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "security",
                                "user-summary",
                                "{{user_id}}"
                            ]
                        },
                        "description": "Retrieves security summary for a specific user"
                    }
                }
            ],
            "description": "Endpoints for security monitoring and threat detection"
        },
        {
            "name": "Error Scenarios",
            "item": [
                {
                    "name": "Create Order - Missing Consent",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Validation error returned\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.code).to.eql('VALIDATION_ERROR');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"patientId\": \"{{patient_id}}\",\n  \"tests\": [\n    {\n      \"name\": \"Complete Blood Count\",\n      \"code\": \"CBC\",\n      \"specimenType\": \"Blood\"\n    }\n  ],\n  \"indication\": \"Test without consent\",\n  \"consentObtained\": false,\n  \"consentObtainedBy\": \"{{user_id}}\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}",
                            "host": [
                                "{{base_url}}"
                            ]
                        },
                        "description": "Tests validation error when consent is not obtained"
                    }
                },
                {
                    "name": "Get Order - Invalid ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Validation error for invalid ID format\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.code).to.eql('VALIDATION_ERROR');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/INVALID-ORDER-ID",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "INVALID-ORDER-ID"
                            ]
                        },
                        "description": "Tests validation error for invalid order ID format"
                    }
                },
                {
                    "name": "Add Results - Invalid Test Codes",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Validation error for invalid test codes\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.code).to.eql('VALIDATION_ERROR');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"values\": [\n    {\n      \"testCode\": \"INVALID_CODE\",\n      \"testName\": \"Invalid Test\",\n      \"numericValue\": 100,\n      \"unit\": \"mg/dL\"\n    }\n  ]\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/{{order_id}}/results",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "{{order_id}}",
                                "results"
                            ]
                        },
                        "description": "Tests validation error when result test codes don't match ordered tests"
                    }
                },
                {
                    "name": "Resolve Token - Invalid Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Token not found error\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.code).to.eql('NOT_FOUND');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/scan?token=invalid_token_12345",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "scan"
                            ],
                            "query": [
                                {
                                    "key": "token",
                                    "value": "invalid_token_12345"
                                }
                            ]
                        },
                        "description": "Tests error handling for invalid or expired tokens"
                    }
                }
            ],
            "description": "Test cases for error scenarios and validation"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "// Set default headers",
                    "pm.request.headers.add({",
                    "    key: 'User-Agent',",
                    "    value: 'Postman Manual Lab API Tests'",
                    "});",
                    "",
                    "// Check if JWT token is set",
                    "if (!pm.collectionVariables.get('jwt_token')) {",
                    "    console.log('Warning: JWT token not set. Please set the jwt_token collection variable.');",
                    "}"
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "// Global test for response time",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "// Global test for response format",
                    "pm.test(\"Response has correct format\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('success');",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "});"
                ],
                "type": "text/javascript"
            }
        }
    ]
}