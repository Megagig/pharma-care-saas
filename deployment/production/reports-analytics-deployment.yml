# Reports & Analytics Module - Production Deployment Configuration

apiVersion: v1
kind: ConfigMap
metadata:
  name: reports-analytics-config
  namespace: pharma-care-prod
data:
  # Reports & Analytics Configuration
  REPORTS_CACHE_TTL: '300'
  REPORTS_MAX_CONCURRENT: '10'
  REPORTS_EXPORT_TIMEOUT: '30000'
  REPORTS_MAX_EXPORT_SIZE: '50MB'
  REPORTS_ALLOWED_FORMATS: 'pdf,csv,excel'
  REPORTS_AUDIT_ENABLED: 'true'
  REPORTS_EMAIL_ENABLED: 'true'

  # Performance Settings
  REPORTS_AGGREGATION_BATCH_SIZE: '1000'
  REPORTS_CACHE_ENABLED: 'true'
  REPORTS_BACKGROUND_JOBS: 'true'

  # Security Settings
  REPORTS_RBAC_ENABLED: 'true'
  REPORTS_DATA_ANONYMIZATION: 'true'
  REPORTS_AUDIT_RETENTION_DAYS: '365'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pharma-care-backend
  namespace: pharma-care-prod
  labels:
    app: pharma-care-backend
    module: reports-analytics
spec:
  replicas: 3
  selector:
    matchLabels:
      app: pharma-care-backend
  template:
    metadata:
      labels:
        app: pharma-care-backend
        module: reports-analytics
    spec:
      containers:
        - name: backend
          image: pharma-care-backend:latest
          ports:
            - containerPort: 5000
          env:
            - name: NODE_ENV
              value: 'production'
            - name: REPORTS_CACHE_TTL
              valueFrom:
                configMapKeyRef:
                  name: reports-analytics-config
                  key: REPORTS_CACHE_TTL
            - name: REPORTS_MAX_CONCURRENT
              valueFrom:
                configMapKeyRef:
                  name: reports-analytics-config
                  key: REPORTS_MAX_CONCURRENT
            - name: REPORTS_EXPORT_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: reports-analytics-config
                  key: REPORTS_EXPORT_TIMEOUT
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /api/health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health/ready
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: pharma-care-backend-service
  namespace: pharma-care-prod
spec:
  selector:
    app: pharma-care-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: ClusterIP

---
# Redis Cache for Reports
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reports-redis-cache
  namespace: pharma-care-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reports-redis-cache
  template:
    metadata:
      labels:
        app: reports-redis-cache
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '200m'
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: reports-redis-service
  namespace: pharma-care-prod
spec:
  selector:
    app: reports-redis-cache
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP

---
# Background Job Processor for Reports
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reports-job-processor
  namespace: pharma-care-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reports-job-processor
  template:
    metadata:
      labels:
        app: reports-job-processor
    spec:
      containers:
        - name: job-processor
          image: pharma-care-backend:latest
          command: ['node', 'dist/services/BackgroundJobService.js']
          env:
            - name: NODE_ENV
              value: 'production'
            - name: JOB_PROCESSOR_MODE
              value: 'true'
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '1Gi'
              cpu: '500m'
